app.service('assembler', ['opcodes', function (opcodes) {
    return {
        go: function (input) {
            // Use https://www.debuggex.com/
            // Matches: "label: INSTRUCTION (["')OPERAND1(]"'), (["')OPERAND2(]"')
            // GROUPS:      1       2               3                    7
            var regex = /^[\t ]*(?:([.A-Za-z]\w*)[:])?(?:[\t ]*([A-Za-z]{2,4})(?:[\t ]+(\[(\w+((\+|-)\d+)?)\]|\".+?\"|\'.+?\'|[.A-Za-z0-9]\w*)(?:[\t ]*[,][\t ]*(\[(\w+((\+|-)\d+)?)\]|\".+?\"|\'.+?\'|[.A-Za-z0-9]\w*))?)?)?/;

            // Regex group indexes for operands
            var op1_group = 3;
            var op2_group = 7;

            // MATCHES: "(+|-)INTEGER"
            var regexNum = /^[-+]?[0-9]+$/;
            // MATCHES: "(.L)abel"
            var regexLabel = /^[.A-Za-z]\w*$/;
            // Contains the program code & data generated by the assembler
            var code = [];
            // Contains the mapping from instructions to assembler line
            var mapping = {};
            // Hash map of label used to replace the labels after the assembler generated the code
            var labels = {};
            // Hash of uppercase labels used to detect duplicates
            var normalizedLabels = {};

            // Split text into code lines
            var lines = input.split('\n');

            // Allowed formats: 200, 200d, 0xA4, 0o48, 101b
            var parseNumber = function (input) {
                if (input.slice(0, 2) === "0x") {
                    return parseInt(input.slice(2), 16);
                } else if (input.slice(0, 2) === "0o") {
                    return parseInt(input.slice(2), 8);
                } else if (input.slice(input.length - 1) === "b") {
                    return parseInt(input.slice(0, input.length - 1), 2);
                } else if (input.slice(input.length - 1) === "d") {
                    return parseInt(input.slice(0, input.length - 1), 10);
                } else if (regexNum.exec(input)) {
                    return parseInt(input, 10);
                } else {
                    throw "Invalid number format";
                }
            };

            // Allowed registers: A, B, C, M, SP
            var parseRegister = function (input) {
                input = input.toUpperCase();

                if (input === 'A') {
                    return 0;
                } else if (input === 'B') {
                    return 1;
                } else if (input === 'C') {
                    return 2;
                } else if (input === 'M') {
                    return 3;
                } else if (input === 'SP') {
                    return 4;
                } else {
                    return undefined;
                }
            };

            var parseOffsetAddressing = function (input) {
                input = input.toUpperCase();
                var m = 0;
                var base = 0;

                if (input[0] === 'A') {
                    base = 0;
                } else if (input[0] === 'B') {
                    base = 1;
                } else if (input[0] === 'C') {
                    base = 2;
                } else if (input[0] === 'M') {
                    base = 3;
                } else if (input.slice(0, 2) === "SP") {
                    base = 4;
                } else {
                    return undefined;
                }
                var offset_start = 1;
                if (base === 4) {
                    offset_start = 2;
                }

                if (input[offset_start] === '-') {
                    m = -1;
                } else if (input[offset_start] === '+') {
                    m = 1;
                } else {
                    return undefined;
                }

                var offset = m * parseInt(input.slice(offset_start + 1), 10);

                if (offset < -16 || offset > 15)
                    throw "offset must be a value between -16...+15";

                if (offset < 0) {
                    offset = 32 + offset; // two's complement representation in 5-bit
                }

                return offset * 8 + base; // shift offset 3 bits right and add code for register
            };

            // Allowed: Register, Label or Number; SP+/-Number is allowed for 'regaddress' type
            var parseRegOrNumber = function (input, typeReg, typeNumber) {
                var register = parseRegister(input);

                if (register !== undefined) {
                    return {type: typeReg, value: register};
                } else {
                    var label = parseLabel(input);
                    if (label !== undefined) {
                        return {type: typeNumber, value: label};
                    } else {
                        if (typeReg === "regaddress") {

                            register = parseOffsetAddressing(input);

                            if (register !== undefined) {
                                return {type: typeReg, value: register};
                            }
                        }

                        var value = parseNumber(input);

                        if (isNaN(value)) {
                            throw "Not a " + typeNumber + ": " + value;
                        }
                        else if (value < 0 || value > 255)
                            throw typeNumber + " must have a value between 0-255";

                        return {type: typeNumber, value: value};
                    }
                }
            };

            var parseLabel = function (input) {
                return regexLabel.exec(input) ? input : undefined;
            };

            var getValue = function (input) {
                switch (input.slice(0, 1)) {
                    case '[': // [number] or [register]
                        var address = input.slice(1, input.length - 1);
                        return parseRegOrNumber(address, "regaddress", "address");
                    case '"': // "String"
                        var text = input.slice(1, input.length - 1);
                        var chars = [];

                        for (var i = 0, l = text.length; i < l; i++) {
                            chars.push(text.charCodeAt(i));
                        }

                        return {type: "numbers", value: chars};
                    case "'": // 'C'
                        var character = input.slice(1, input.length - 1);
                        if (character.length > 1)
                            throw "Only one character is allowed. Use String instead";

                        return {type: "number", value: character.charCodeAt(0)};
                    default: // REGISTER, NUMBER or LABEL
                        return parseRegOrNumber(input, "register", "number");
                }
            };

            var addLabel = function (label) {
                var upperLabel = label.toUpperCase();
                if (upperLabel in normalizedLabels)
                    throw "Duplicate label: " + label;

                if (upperLabel === "A" || upperLabel === "B" || upperLabel === "C" || upperLabel === "M")
                    throw "Label contains keyword: " + upperLabel;

                labels[label] = code.length;
            };

            var checkNoExtraArg = function (instr, arg) {
                if (arg !== undefined) {
                    throw instr + ": too many arguments";
                }
            };

            for (var i = 0, l = lines.length; i < l; i++) {
                try {
                    var match = regex.exec(lines[i]);
                    if (match[1] !== undefined || match[2] !== undefined) {
                        if (match[1] !== undefined) {
                            addLabel(match[1]);
                        }

                        if (match[2] !== undefined) {
                            var instr = match[2].toUpperCase();
                            var p1, p2, opCode;

                            // Add mapping instr pos to line number
                            // Don't do it for DB as this is not a real instruction
                            if (instr !== 'DB') {
                                mapping[code.length] = i;
                            }

                            switch (instr) {
                                case 'DB':
                                    p1 = getValue(match[op1_group]);

                                    if (p1.type === "number") {
                                        code.push(p1.value);
                                    }
                                    else if (p1.type === "numbers")
                                        for (var j = 0, k = p1.value.length; j < k; j++) {
                                            code.push(p1.value[j]);
                                        }
                                    else
                                        throw "DB does not support this operand";
                                    break;
                                case 'GOTO':
                                    p1 = getValue(match[op1_group]);

                                    if (p1.type === "number") {
                                        code.push(opcodes.LIX);
                                        mapping[code.length] = i+1;
                                        code.push(p1.value);
                                        mapping[code.length] = i+2;
                                        opCode = opcodes.MMA;
                                        code.push(opCode);
                                        mapping[code.length] = i+3;
                                        opCode = opcodes.JMP;
                                        code.push(opCode);
                                    }
                                    break;
                                case 'HLT':
                                    checkNoExtraArg('HLT', match[op1_group]);
                                    opCode = opcodes.HLT;
                                    code.push(opCode);
                                    break;
                                case 'NOP':
                                    checkNoExtraArg('NOP', match[op1_group]);
                                    opCode = opcodes.NOP;
                                    code.push(opCode);
                                    break;

                                case 'ADL':
                                    checkNoExtraArg('ADL', match[op1_group]);
                                    opCode = opcodes.ADL;
                                    code.push(opCode);
                                    break;
                                case 'ADH':
                                    checkNoExtraArg('ADH', match[op1_group]);
                                    opCode = opcodes.ADH;
                                    code.push(opCode);
                                    break;
                                case 'AND':
                                    checkNoExtraArg('AND', match[op1_group]);
                                    opCode = opcodes.AND;
                                    code.push(opCode);
                                    break;
                                case 'OR':
                                    checkNoExtraArg('OR', match[op1_group]);
                                    opCode = opcodes.OR;
                                    code.push(opCode);
                                    break;
                                case 'XOR':
                                    checkNoExtraArg('XOR', match[op1_group]);
                                    opCode = opcodes.XOR;
                                    code.push(opCode);
                                    break;
                                case 'NOT':
                                    checkNoExtraArg('NOT', match[op1_group]);
                                    opCode = opcodes.NOT;
                                    code.push(opCode);
                                    break;
                                case 'CLC':
                                    checkNoExtraArg('CLC', match[op1_group]);
                                    opCode = opcodes.CLC;
                                    code.push(opCode);
                                    break;
                                case 'SEC':
                                    checkNoExtraArg('SEC', match[op1_group]);
                                    opCode = opcodes.SEC;
                                    code.push(opCode);
                                    break;
                                case 'SHL':
                                    checkNoExtraArg('SHL', match[op1_group]);
                                    opCode = opcodes.SHL;
                                    code.push(opCode);
                                    break;
                                case 'SHR':
                                    checkNoExtraArg('SHR', match[op1_group]);
                                    opCode = opcodes.SHR;
                                    code.push(opCode);
                                    break;
                                case 'JMP':
                                    checkNoExtraArg('JMP', match[op1_group]);
                                    opCode = opcodes.JMP;
                                    code.push(opCode);
                                    break;
                                case 'JNE':
                                    checkNoExtraArg('JNE', match[op1_group]);
                                    opCode = opcodes.JNE;
                                    code.push(opCode);
                                    break;
                                case 'LDA':
                                    checkNoExtraArg('LDA', match[op1_group]);
                                    opCode = opcodes.LDA;
                                    code.push(opCode);
                                    break;
                                case 'STA':
                                    checkNoExtraArg('STA', match[op1_group]);
                                    opCode = opcodes.STA;
                                    code.push(opCode);
                                    break;
                                case 'MAC':
                                    checkNoExtraArg('MAC', match[op1_group]);
                                    opCode = opcodes.MAC;
                                    code.push(opCode);
                                    break;
                                case 'MBA':
                                    checkNoExtraArg('MBA', match[op1_group]);
                                    opCode = opcodes.MBA;
                                    code.push(opCode);
                                    break;
                                case 'MAM':
                                    checkNoExtraArg('MAM', match[op1_group]);
                                    opCode = opcodes.MAM;
                                    code.push(opCode);
                                    break;
                                case 'MMA':
                                    checkNoExtraArg('MMA', match[op1_group]);
                                    opCode = opcodes.MMA;
                                    code.push(opCode);
                                    break;
                                case 'MPA':
                                    checkNoExtraArg('MAP', match[op1_group]);
                                    opCode = opcodes.MAP;
                                    code.push(opCode);
                                    break;
                                case 'MGM':
                                    checkNoExtraArg('MGM', match[op1_group]);
                                    opCode = opcodes.MGM;
                                    code.push(opCode);
                                    break;
                                case 'MLG':
                                    checkNoExtraArg('MLG', match[op1_group]);
                                    opCode = opcodes.MLG;
                                    code.push(opCode);
                                    break;
                                case 'MGL':
                                    checkNoExtraArg('MGL', match[op1_group]);
                                    opCode = opcodes.MGL;
                                    code.push(opCode);
                                    break;
                                case 'IXR':
                                    checkNoExtraArg('IXR', match[op1_group]);
                                    opCode = opcodes.IXR;
                                    code.push(opCode);
                                    break;
                                case 'IXN':
                                    checkNoExtraArg('IXN', match[op1_group]);
                                    opCode = opcodes.IXN;
                                    code.push(opCode);
                                    break;
                                case 'LIL':
                                    p1 = getValue(match[op1_group]);
                                    checkNoExtraArg('LIL', match[op2_group]);
                                    if (p1.type === "number")
                                        switch (p1.value) {
                                            case 0:
                                                opCode = opcodes.LIL_0;
                                                break;
                                            case 1:
                                                opCode = opcodes.LIL_1;
                                                break;
                                            case 2:
                                                opCode = opcodes.LIL_2;
                                                break;
                                            case 3:
                                                opCode = opcodes.LIL_3;
                                                break;
                                            case 4:
                                                opCode = opcodes.LIL_4;
                                                break;
                                            case 5:
                                                opCode = opcodes.LIL_5;
                                                break;
                                            case 6:
                                                opCode = opcodes.LIL_6;
                                                break;
                                            case 7:
                                                opCode = opcodes.LIL_7;
                                                break;
                                            case 8:
                                                opCode = opcodes.LIL_8;
                                                break;
                                            case 9:
                                                opCode = opcodes.LIL_9;
                                                break;
                                            case 10:
                                                opCode = opcodes.LIL_A;
                                                break;
                                            case 11:
                                                opCode = opcodes.LIL_B;
                                                break;
                                            case 12:
                                                opCode = opcodes.LIL_C;
                                                break;
                                            case 13:
                                                opCode = opcodes.LIL_D;
                                                break;
                                            case 14:
                                                opCode = opcodes.LIL_E;
                                                break;
                                            case 15:
                                                opCode = opcodes.LIL_F;
                                                break;
                                            default:
                                                throw "Incorrect value for LIL";
                                        }
                                    else
                                        throw instr + " does not suppport this operand";
                                    code.push(opCode);
                                    break;
                                case 'LIH':
                                    p1 = getValue(match[op1_group]);
                                    checkNoExtraArg('LIH', match[op2_group]);
                                    if (p1.type === "number")
                                        switch (p1.value) {
                                            case 0:
                                                opCode = opcodes.LIH_0;
                                                break;
                                            case 1:
                                                opCode = opcodes.LIH_1;
                                                break;
                                            case 2:
                                                opCode = opcodes.LIH_2;
                                                break;
                                            case 3:
                                                opCode = opcodes.LIH_3;
                                                break;
                                            case 4:
                                                opCode = opcodes.LIH_4;
                                                break;
                                            case 5:
                                                opCode = opcodes.LIH_5;
                                                break;
                                            case 6:
                                                opCode = opcodes.LIH_6;
                                                break;
                                            case 7:
                                                opCode = opcodes.LIH_7;
                                                break;
                                            case 8:
                                                opCode = opcodes.LIH_8;
                                                break;
                                            case 9:
                                                opCode = opcodes.LIH_9;
                                                break;
                                            case 10:
                                                opCode = opcodes.LIH_A;
                                                break;
                                            case 11:
                                                opCode = opcodes.LIH_B;
                                                break;
                                            case 12:
                                                opCode = opcodes.LIH_C;
                                                break;
                                            case 13:
                                                opCode = opcodes.LIH_D;
                                                break;
                                            case 14:
                                                opCode = opcodes.LIH_E;
                                                break;
                                            case 15:
                                                opCode = opcodes.LIH_F;
                                                break;
                                            default:
                                                throw "Incorrect value for LIH";
                                        }
                                    else
                                        throw instr + " does not suppport this operand";
                                    code.push(opCode);
                                    break;
                                case 'LIX':
                                    p1 = getValue(match[op1_group]);
                                    checkNoExtraArg('LIX', match[op2_group]);
                                    opCode = opcodes.LIX;
                                    code.push(opCode);
                                    mapping[code.length] = i+1;
                                    code.push(p1.value);
                                    break;
                                default:
                                    throw "Invalid instruction: " + match[2];
                            }
                        }
                    } else {
                        // Check if line starts with a comment otherwise the line contains an error and can not be parsed
                        var line = lines[i].trim();
                        if (line !== "" && line.slice(0, 1) !== ";") {
                            throw "Syntax error";
                        }
                    }
                } catch (e) {
                    throw {error: e, line: i};
                }
            }

            // Replace label
            for (i = 0, l = code.length; i < l; i++) {
                if (!angular.isNumber(code[i])) {
                    if (code[i] in labels) {
                        if (i - 1 >= 0) {
                            if (code[i - 1] == opcodes.LIX) {
                                code[i - 1] = opcodes.LIL_0 + (labels[code[i]] & 0x0F);
                                code[i] = opcodes.LIH_0 + (labels[code[i]] >>> 4);
                            }
                            else {
                                code[i] = labels[code[i]];
                            }
                        }
                        else {
                            code[i] = labels[code[i]];
                        }
                    } else {

                        throw {error: "Undefined label: " + code[i]};
                    }
                }
            }

            return {code: code, mapping: mapping, labels: labels};
        }
    };
}]);
